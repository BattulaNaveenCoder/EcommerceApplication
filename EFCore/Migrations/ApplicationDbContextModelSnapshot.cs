// <auto-generated />
using System;
using EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoriesTags", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INT");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CategoriesTags");
                });

            modelBuilder.Entity("Models.Model.CartItems", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkCartId")
                        .HasColumnType("INT");

                    b.Property<int>("FkProductId")
                        .HasColumnType("INT");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Quantity")
                        .HasMaxLength(100)
                        .HasColumnType("INT");

                    b.HasKey("CartId");

                    b.HasIndex("FkCartId");

                    b.HasIndex("FkProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Models.Model.Carts", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkuserId")
                        .HasColumnType("INT");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CartId");

                    b.HasIndex("FkuserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Models.Model.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Models.Model.OrderLines", b =>
                {
                    b.Property<int>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderLineId"));

                    b.Property<int>("FkOrderId")
                        .HasColumnType("INT");

                    b.Property<int>("FkProductId")
                        .HasColumnType("INT");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Quantity")
                        .HasMaxLength(100)
                        .HasColumnType("INT");

                    b.HasKey("OrderLineId");

                    b.HasIndex("FkOrderId");

                    b.HasIndex("FkProductId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Models.Model.Orders", b =>
                {
                    b.Property<int>("OrderIf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderIf"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkUserId")
                        .HasColumnType("INT");

                    b.HasKey("OrderIf");

                    b.HasIndex("FkUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Model.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FkCategoryId")
                        .HasColumnType("INT");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Summery")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("FkCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Models.Model.Reviews", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkProductId")
                        .HasColumnType("INT");

                    b.Property<int>("FkUserId")
                        .HasColumnType("INT");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("FkProductId");

                    b.HasIndex("FkUserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Models.Model.SocialProfiles", b =>
                {
                    b.Property<int>("SocialProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialProfileId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("INT");

                    b.Property<string>("PlatformUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("platform")
                        .HasColumnType("int");

                    b.HasKey("SocialProfileId");

                    b.HasIndex("FkUserId");

                    b.ToTable("SocialProfiles");
                });

            modelBuilder.Entity("Models.Model.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Models.Model.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(2000)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Bio")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Comapany")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CretedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProductTags", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INT");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("CategoriesTags", b =>
                {
                    b.HasOne("Models.Model.Categories", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Model.CartItems", b =>
                {
                    b.HasOne("Models.Model.Carts", "carts")
                        .WithMany("CartItems")
                        .HasForeignKey("FkCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Model.Products", "Products")
                        .WithMany("CartItems")
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("carts");
                });

            modelBuilder.Entity("Models.Model.Carts", b =>
                {
                    b.HasOne("Models.Model.Users", "Users")
                        .WithMany("Carts")
                        .HasForeignKey("FkuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Model.OrderLines", b =>
                {
                    b.HasOne("Models.Model.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("FkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Model.Products", "Products")
                        .WithMany("OrderLines")
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.Model.Orders", b =>
                {
                    b.HasOne("Models.Model.Users", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Model.Products", b =>
                {
                    b.HasOne("Models.Model.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("FkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Models.Model.Reviews", b =>
                {
                    b.HasOne("Models.Model.Products", "Products")
                        .WithMany("Reviews")
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Model.Users", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Model.SocialProfiles", b =>
                {
                    b.HasOne("Models.Model.Users", "Users")
                        .WithMany("SocialProfiles")
                        .HasForeignKey("FkUserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProductTags", b =>
                {
                    b.HasOne("Models.Model.Products", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Model.Carts", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Models.Model.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.Model.Products", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderLines");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Models.Model.Users", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("SocialProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
